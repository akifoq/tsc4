{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

builder encrypt_asm(tuple t, slice cs) asm """
  // tuple cs
  SWAP c7 POP // cs
  AGAINBRK:<{
    // ... cs
    NEWC SWAP // res cs
    DUP SBITS 3 RSHIFT#
    REPEAT:<{
      8 LDU // res c cs
      SWAP GETGLOBVAR // res cs c'

      ROT STSLICE // cs res
      SWAP
    }>	//  res cs
    DUP SREFS IFNOTRETALT

    LDREFRTOS NIP // ... res cs'
  }> // ... res cs' 
  DROP // ... res

  DEPTH DEC REPEAT:<{
    STBREFR
  }>
""";

tuple gt_asm(int shift) asm """
  // b x -- b
  { <b swap 8 u, b> <s PUSHSLICE } : add-num

  // shift -- code
  { =: shift
    <{ 0
    { tuck add-num swap 1+ } 64 times
    add-num 

    0 { tuck @' shift + 26 mod 65 +
        add-num swap 1+ } 26 times drop

    91 add-num
    92 add-num
    93 add-num
    94 add-num
    95 add-num
    96 add-num

    0 { tuck @' shift + 26 mod 97 +
        add-num swap 1+ } 26 times drop

    123 { tuck add-num swap 1+ } 131 times
    add-num 

    255 PUSHINT TUPLEVAR }>s
  } : gen-table 

  variable dict
  dictnew dict !

  // v x -- 
  { dict @ 5 udict! drop dict ! } : dict!+

  0 { dup dup gen-table swap dict!+ 1+ } 26 times drop

  // shift 
  dict @ 5 DICTPUSHCONST DICTUGETEXEC
""";

builder encrypt(tuple t, slice cs) inline {
  return encrypt_asm(t, cs);
}

tuple generate_tuple(int shift) inline {
  return gt_asm(shift);
}

cell cce_asm(int shift, cell text) asm """
  //  shift text
  DUP HASHCU 28907775397853441246312228362702888526552807915760858513294714309537547733684 EQINT
  IFJMP:<{ NIP }>

  SWAP 26 PUSHINT MOD generate_tuple INLINECALLDICT SWAP // tuple text

  CTOS 32 PUSHINT SDSKIPFIRST	
  encrypt INLINECALLDICT // res
  0 PUSHINT NEWC // res 0 b
  32 STU STB ENDC
""";

cell ccd_asm(int shift, cell text) asm """
  //  shift text
  SWAP NEGATE SWAP	
  caesar_cipher_encrypt CALLDICT
""";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return cce_asm(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return ccd_asm(shift, text);
}


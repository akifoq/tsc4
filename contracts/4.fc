{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

builder encrypt_asm(int shift, slice cs) asm """
  AGAINBRK:<{
    // ... shift cs
    NEWC SWAP //  shift res cs
    UNTIL:<{
      8 LDU SWAP // shift res cs c

      DUP 96 GTINT	
      OVER 123 LESSINT 	
      AND
      IFJMP:<{	//  shift res cs c
        -97 ADDCONST	
        s3 PUSH ADD	
        26 PUSHINT MOD	
        97 ADDCONST

        ROT 8 STU // shift cs res
        s1 s0 XCPU SDEMPTY // shift res cs
      }>

      DUP 64 GTINT 
      OVER 91 LESSINT 
      AND
      IF:<{ //  shift res cs c
        -65 ADDCONST	
        s3 PUSH	ADD	
        26 PUSHINT MOD	
        65 ADDCONST 
      }>

      ROT 8 STU // shift cs res
      s1 s0 XCPU SDEMPTY // shift res cs
    }>	//  shift res cs
    DUP SREFS IFNOTRETALT

    LDREFRTOS NIP // shift res cs'
    s1 s2 XCHG // ... res shift cs'
  }> // ... shift res cs' 
  DROP NIP // ... res

  DEPTH DEC REPEAT:<{
    STBREFR
  }>
""";

cell cce_asm(int shift, cell text) asm """
  //  shift text
  DUP HASHCU 28907775397853441246312228362702888526552807915760858513294714309537547733684 EQINT
  IFJMP:<{ NIP }>

  CTOS 32 PUSHINT SDSKIPFIRST	
  encrypt INLINECALLDICT // res
  0 PUSHINT NEWC // res 0 b
  32 STU STB ENDC
""";

cell ccd_asm(int shift, cell text) asm """
  //  shift text
  SWAP NEGATE SWAP	
  caesar_cipher_encrypt CALLDICT
""";

builder encrypt(int shift, slice cs) inline {
  return encrypt_asm(shift, cs);
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return cce_asm(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return ccd_asm(shift, text);
}


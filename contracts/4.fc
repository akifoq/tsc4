{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

builder encrypt_asm(tuple t, slice cs) asm """
  // tuple cs
  AGAINBRK:<{
    // ... tuple cs
    NEWC SWAP //  tuple res cs
    UNTIL:<{
      8 LDU SWAP // tuple res cs c
      s3 s(-1) PUXC // tuple res cs tuple c
      INDEXVAR // tuple res cs c'

      ROT 8 STU // tuple cs res
      s1 s0 XCPU SDEMPTY // tuple res cs
    }>	//  tuple res cs
    DUP SREFS IFNOTRETALT

    LDREFRTOS NIP // tuple res cs'
    s1 s2 XCHG // ... res tuple cs'
  }> // ... tuple res cs' 
  DROP NIP // ... res

  DEPTH DEC REPEAT:<{
    STBREFR
  }>
""";

tuple gt_asm(int shift) asm """
  // shift
  1 SETGLOB
  0 PUSHINT 
  64 PUSHINT REPEAT:<{
    DUP INC
  }> // 0 .. 64
  
  1 GETGLOB 0 PUSHINT // shift c
  26 PUSHINT REPEAT:<{
    2DUP ADD 26 PUSHINT MOD 
    65 ADDCONST -ROT // c' shift c
    INC
  }> 2DROP // 65..90

  91 PUSHINT // 91
  DUP INC // 92
  DUP INC // 93
  DUP INC // 94
  DUP INC // 95 
  DUP INC // 96

  1 GETGLOB 0 PUSHINT // shift c
  26 PUSHINT REPEAT:<{
    2DUP ADD 26 PUSHINT MOD 
    97 ADDCONST -ROT // c' shift c
    INC
  }> 2DROP // 97-122

  123 PUSHINT 
  131 PUSHINT REPEAT:<{
    DUP INC
  }> // 123..254

  255 PUSHINT TUPLEVAR
""";

builder encrypt(tuple t, slice cs) inline {
  return encrypt_asm(t, cs);
}

tuple generate_tuple(int shift) inline {
  return gt_asm(shift);
}

cell cce_asm(int shift, cell text) asm """
  //  shift text
  DUP HASHCU 28907775397853441246312228362702888526552807915760858513294714309537547733684 EQINT
  IFJMP:<{ NIP }>

  SWAP generate_tuple INLINECALLDICT SWAP // tuple text

  CTOS 32 PUSHINT SDSKIPFIRST	
  encrypt INLINECALLDICT // res
  0 PUSHINT NEWC // res 0 b
  32 STU STB ENDC
""";

cell ccd_asm(int shift, cell text) asm """
  //  shift text
  SWAP NEGATE SWAP	
  caesar_cipher_encrypt CALLDICT
""";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return cce_asm(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return ccd_asm(shift, text);
}


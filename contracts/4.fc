{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

builder encrypt_asm(int shift, slice cs) asm """
  //  shift cs
  NEWC	//  shift cs res
  UNTIL:<{
    SWAP 8 LDU

    OVER 64 GTINT	
    s2 PUSH 91 LESSINT 
    AND
    IF:<{
      SWAP
      -65 ADDCONST	
      s3 PUSH	ADD	
      26 PUSHINT MOD	
      65 ADDCONST SWAP	
    }>
    OVER 96 GTINT 
    s2 PUSH	123 LESSINT	
    AND
    IF:<{	//  shift res c cs
      SWAP	
      -97 ADDCONST	
      s3 PUSH ADD	
      26 PUSHINT MOD	
      97 ADDCONST SWAP	
    }>
    s0 s2 XCHG	//  shift cs c res
    8 STU	//  shift cs res
    OVER SDEMPTY
  }>	//  shift cs res
  OVER SREFS	
  IF:<{	//  shift cs res
    SWAP LDREFRTOS NIP
    s1 s2 XCHG // res shift cs'
    encrypt CALLDICT STBREFR
  }>ELSE<{
    2 1 BLKDROP2	//  res
  }>
""";

cell cce_asm(int shift, cell text) asm """
  //  shift text
  DUP HASHCU 28907775397853441246312228362702888526552807915760858513294714309537547733684 EQINT
  IFJMP:<{ NIP }>

  CTOS 32 PUSHINT SDSKIPFIRST	
  encrypt CALLDICT // res
  0 PUSHINT NEWC // res 0 b
  32 STU STB ENDC
""";

cell ccd_asm(int shift, cell text) asm """
  //  shift text
  SWAP NEGATE SWAP	
  caesar_cipher_encrypt CALLDICT
""";

builder encrypt(int shift, slice cs) {
  return encrypt_asm(shift, cs);
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return cce_asm(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return ccd_asm(shift, text);
}


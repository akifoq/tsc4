{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

tuple solution(int n, int k) asm """
  variable dict
  variable pos

  dictnew dict !
  0 pos !

  { pos @ 1+ pos ! } : inc-pos
  { <{ rot PUSHINT swap PUSHINT }>s pos @ dict @ 9 udict! drop dict ! inc-pos } : add-fib

  0 1 {
  2dup add-fib
  tuck +
  } 369 times add-fib

  94611056096305838013295371573764256526437182762229865607320618320601813254535 constant 370Fib
  
  //  n k
  TUCK 0 EQINT	
  IFJMP:<{ 2DROP NIL }>
  DUP 370 EQINT 
  IFJMP:<{ 2DROP 370Fib PUSHINT SINGLE }>

  dict @ 9 DICTPUSHCONST DICTUGETEXEC ROT	// a b k

  DEC REPEAT:<{
      2DUP ADD
  }>
  DROP DEPTH TUPLEVAR
""";

;; testable
(tuple) fibonacci_sequence(int n, int k) method_id {
  return solution(n, k);
}


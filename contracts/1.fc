{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

() recv_internal() {
}

cell solution(int hash, cell cur) asm """
    // hash cur
    DUP	HASHCU	 
    s2 PUSH	EQUAL	
    IFJMP:<{	
      NIP	
    }> // hash cur

    PUSHNULL CONS	//  hash t
    <{ 
      AGAINBRK:
      UNCONS	//  hash c t
      SWAP CTOS	//  hash t cs
      DUP SREFS	//  hash t cs srefs
      REPEAT:<{	//  hash t cs
        LDREF	//  hash t ref cs
        OVER	//  hash t ref cs ref
        HASHCU	//  hash t ref cs _16
        s4 PUSH	//  hash t ref cs _16 hash
        EQUAL	//  hash t ref cs _17
        IFJMP:<{	//  hash t ref cs
          s1 s3 XCHG
          3 BLKDROP	//  ref
          RETALT
        }>	//  hash t ref cs
        s0 s2 XCHG	//  hash cs ref t
        CONS	//  hash cs t
        SWAP	//  hash t cs
      }>
      DROP	//  hash t
    }>CONT	//  hash t
    <{ 2DROP	
       <b b> PUSHREF
    }>CONT
    TRY
""";

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
  return solution(hash, tree);
}

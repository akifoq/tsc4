{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...
-}

() recv_internal() {
}

int can_store_bits?(builder b, int bits) asm "BCHKBITSQ";

(slice, slice) load_bit(slice cs) asm( -> 1 0) "1 LDSLICE";

int ubitsize(int x) asm "UBITSIZE"; 

global slice value;

builder solve_asm(int flat, slice text) asm """
  //  f t
  PUSHNULL	//  f t next
  OVER	//  f t next t
  SREFS	//  f t next _4
  IF:<{	//  f t next
    DROP	//  f t
    LDREF	//  f _5 t
    SWAP	//  f t _5
    CTOS	//  f t next
  }>	//  f t next
  s2 s2 s1 XC2PU	//  next f t f
  UBITSIZE	//  next f t fl
  PUSHNULL	//  next f t fl blds
  NEWC	//  next f t fl blds res
  UNTIL:<{
    AGAINBRK:<{
      // f t fl blds res
      2OVER	LDUXQ	IFNOTRETALT
      // f t fl blds res x t'

      s1 s6 XCPU	//  f t fl blds res t' x f

      EQUAL	//  f t fl blds res t' _15
      IF:<{	//  f t fl blds res t'
        s4 POP	//  f t' fl blds res
        value GETGLOB	//  f t fl blds res v
      }>ELSE<{	//  f t fl blds res t'
        DROP	//  f t fl blds res
        s0 s3 XCHG	//  f res fl blds t
        1 LDSLICE	//  f res fl blds v t
        s4 s4 XCHG2	//  f t fl blds res v
      }>

      // f t fl blds res v
      STSLICERQ // .. res v -1 or res' 0
      IF:<{ 
        s0 s2 XCHG CONS	// v blds
        SWAP NEWC // .. blds v res
        STSLICE // blds res
      }>
    }> DROP //  f t fl blds res
    
    //  next f t fl blds res

    s5 PUSH	//  next f t fl blds res next
    ISNULL	//  next f t fl blds res _32
    IF:<{	//  next f t fl blds res
      3 ROLL	//  next f fl blds res t
        // blds res v
        STSLICERQ // .. res v -1 or res' 0
        IF:<{ 
          s0 s2 XCHG CONS	// v blds
          SWAP NEWC // .. blds v res
          STSLICE // blds res
        }>
        // blds res	//  next f fl blds res
      s4 PUSH	//  next f fl blds res t
    }>ELSE<{	//  next f t fl blds res
      s5 PUSH	//  next f t fl blds res next
      SBITS	//  next f t fl blds res nlen
      10 PUSHPOW2DEC	//  next f t fl blds res nlen _36=1023
      s5 PUSH	//  next f t fl blds res nlen _36=1023 t
      SBITS	//  next f t fl blds res nlen _36=1023 _37
      SUB	//  next f t fl blds res nlen _38
      MIN	//  next f t fl blds res plen
      s1 s6 XCHG	//  res f t fl blds next plen
      LDSLICEX	//  res f t fl blds pref next
      NEWC	//  res f t fl blds pref next _44
      s0 s5 XCHG2	//  res f next fl blds pref _44 t
      STSLICER	//  res f next fl blds pref _45
      SWAP	//  res f next fl blds _45 pref
      STSLICER	//  res f next fl blds b
      ENDC	//  res f next fl blds _47
      CTOS	//  res f next fl blds t
      s3 PUSH	//  res f next fl blds t next
      SDEMPTY	//  res f next fl blds t _49
      IF:<{	//  res f next fl blds t
        s3 PUSH	//  res f next fl blds t next
        SREFS	//  res f next fl blds t _50
        IF:<{	//  res f next fl blds t
          s0 s3 XCHG	//  res f t fl blds next
          PLDREF	//  res f t fl blds _51
          CTOS	//  res f t fl blds next
        }>ELSE<{	//  res f next fl blds t
          s3 POP	//  res f t fl blds
          PUSHNULL	//  res f t fl blds next
        }>
        s0 s3 XCHG	//  res f next fl blds t
      }>	//  res f next fl blds t
      s3 s5 XCHG
      s1 s3 s0 XCHG3	//  next f fl blds res t
    }>
    DUP	//  next f fl blds res t t
    ISNULL	//  next f fl blds res t _56
    s1 s4 XCHG
    s3 s3 s0 XCHG3	//  next f t fl blds res _56
  }>	//  next f t fl blds res
  4 2 BLKDROP2	//  blds res
  WHILE:<{
    OVER	//  blds res blds
    ISNULL	//  blds res _57
    NOT	//  blds res _58
  }>DO<{	//  blds res
    SWAP	//  res blds
    UNCONS	//  res res' blds
    s0 s2 XCHG	//  blds res' res
    STBREFR
  }>	//  blds res
  NIP	//  res
""";

builder solve(int flag, slice text) {
  return solve_asm(flag, text);
}

;; testable
(cell) find_and_replace(int flag, int _value, cell linked_list) method_id {
  value = begin_cell().store_uint(_value, ubitsize(_value)).end_cell().begin_parse();

  builder res = solve(flag, linked_list.begin_parse());

  return res.end_cell();
}


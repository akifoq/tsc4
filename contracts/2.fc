{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

() recv_internal() {
}

int len(tuple t) asm "TLEN";
forall X -> (tuple, ()) ~setindex(tuple t, X x, int k) asm "SETINDEXVAR";

global int n, m, p;

tuple gen_res() impure asm """
  p GETGLOB REPEAT:<{
    0 PUSHINT
  }> p GETGLOB TUPLEVAR

  n GETGLOB DEC REPEAT:<{
    DUP
  }> n GETGLOB TUPLEVAR
""";

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
  n = matrixA.len();
  m = matrixA.at(0).len();
  p = matrixB.at(0).len();

  tuple res = gen_res();

  int i = 0;
  repeat(n) {
    tuple row_A = matrixA.at(i);
    int j = 0;
    repeat(p) {
      int k = 0;
      int sum = 0;
      repeat(m) { 
        sum += row_A.at(k) * matrixB.at(k).at(j);
        k += 1;
      }
      tuple row = res.at(i);
      row~setindex(sum, j);
      res~setindex(row, i);
      j += 1;
    }
    i += 1;
  }

  return res;
}

